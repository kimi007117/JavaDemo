apply plugin: 'jacoco' //加载代码覆盖库jacoco

jacoco {
    toolVersion = "0.8.5" //代码覆盖库jacoco版本号
    reportsDir = file("${rootProject.projectDir}/JacocoReport")
}

//代码覆盖率相关配置 start
def coverageSourceDirs = ["${projectDir}/src/main/java"]

task jacocoTestReport(type: JacocoReport) {
    group = "JacocoReport"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        xml.enabled = false
        csv.enabled = false
        html.enabled = true
        html.setDestination(file("${rootProject.projectDir}/JacocoReport/html"))
    }

    //build\intermediates\javac\debug\implementationDebugJavaWithJavac\classes\com\irisking\gacloud\api
    classDirectories = fileTree(
            //检测覆盖率的class所在目录(以项目class所在目录为准)
            //gradle2.3 class所在目录
//            dir: './build/intermediates/classes/debug',
            //gradle3.2 class所在目录
//            dir: './build/intermediates/javac/debug/implementationDebugJavaWithJavac/classes',
            //gradle3.5.3 class所在目录
            dir: './build/intermediates/javac/debug/classes',
            //排除以上目录中不检测的文件列表
            excludes: ['**/R*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ]
    )

    sourceDirectories = files(coverageSourceDirs) //设置需要检测覆盖率的目录
//    executionData = files("$buildDir/outputs/code-coverage/connected/initmvp_coverage.ec") //存储APP运行时产生报告的目录
    executionData = files("${rootProject.projectDir}/JacocoReport/initmvp_coverage.ec")
//    doFirst {
//        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
//            if (file.name.contains('$$')) {
//                file.renameTo(file.path.replace('$$', '$'))
//            }
//        }
//    }
}
//代码覆盖率相关配置 end